---
- name: Gather disk information
  command: lsblk -o NAME,SERIAL,LABEL,VENDOR,MODEL,FSTYPE,SIZE -J
  register: lsblk_output
  changed_when: false

- name: Set disk facts
  set_fact:
    disks_info: >-
      {{ lsblk_output.stdout | from_json | json_query('blockdevices[*].{name: name, serial: serial, label: label, vendor: vendor, model: model, fstype: fstype, size: size}') | selectattr('serial', 'defined') | list }}

- name: Debug disk information
  debug:
    var: disks_info

- name: Initialize mismatched disks list
  set_fact:
    mismatched_disks: []

- name: Check for serial mismatches
  set_fact:
    mismatched_disks: "{{ mismatched_disks + [item | combine({'expected_serial': expected_serial, 'expected_label': expected_label, 'expected_model': expected_model, 'expected_size': expected_size})] }}"
  loop: "{{ luks_disks }}"
  vars:
    expected_disk: "{{ disks_info | selectattr('name', 'equalto', item.device | basename) | first | default({}) }}"
    expected_serial: "{{ expected_disk.serial | default('N/A') }}"
    expected_label: "{{ expected_disk.label | default('N/A') }}"
    expected_model: "{{ expected_disk.model | default('N/A') }}"
    expected_size: "{{ expected_disk.size | default('N/A') }}"
  when: item.serial != expected_serial

- name: Alert on mismatched disks
  debug:
    msg: >-
      Disk {{ item.name }} with device {{ item.device }} has a mismatched serial.
      Expected: {{ item.expected_serial }}, Actual: {{ item.serial }}.
      Label: {{ item.expected_label }}, Model: {{ item.expected_model }}, Size: {{ item.expected_size }}.
  with_items: "{{ mismatched_disks }}"
  failed_when: mismatched_disks | length > 0